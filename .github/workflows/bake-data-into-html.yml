name: Bake CSV into HTML (bash only)

on:
  push:
    paths:
      - 'data/oris_data.csv'
      - 'docs/index.tmpl.html'
      - '.github/workflows/bake-data-into-html.yml'
  workflow_dispatch:

jobs:
  bake:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sanity check files
        shell: bash
        run: |
          set -euo pipefail
          echo "Repo root:"
          ls -la
          echo "docs/:"
          ls -la docs || true
          echo "data/:"
          ls -la data || true

          test -f docs/index.tmpl.html || { echo "ERROR: docs/index.tmpl.html not found"; exit 1; }
          test -f data/oris_data.csv   || { echo "ERROR: data/oris_data.csv not found"; exit 1; }

          # Show placeholder presence
          if grep -q "__ORIS_DATA__" docs/index.tmpl.html; then
            echo "Found __ORIS_DATA__ token in template."
          elif grep -q "<!--DATA:START-->" docs/index.tmpl.html; then
            echo "Found <!--DATA:START--> / <!--DATA:END--> markers in template."
          else
            echo "WARNING: No __ORIS_DATA__ token or markers found in template."
          fi

      - name: Convert CSV -> JSON (awk)
        shell: bash
        run: |
          set -euo pipefail
          CSV="data/oris_data.csv"
          JSON="data/oris_data.json"

          # FPAT handles quoted CSV fields with commas
          awk -v FPAT='([^,]+)|(\"([^\"]|\"\")*\")' '
            BEGIN { OFS=""; print "["; row=0 }
            NR==1 {
              n = split($0, hdr)
              for (i=1;i<=n;i++) { gsub(/^"|"$/, "", hdr[i]) }
              next
            }
            {
              if (NF==0) next
              if (row++>0) print ","
              print "{"
              for (i=1;i<=n;i++) {
                key = hdr[i]
                val = (i<=NF ? $i : "")
                gsub(/^"|"$/, "", val)    # strip CSV quotes
                gsub(/""/, "\"", val)     # un-double quotes inside quoted fields
                gsub(/\\/,"\\\\", val)    # JSON escape backslashes
                gsub(/\"/,"\\\"", val)    # JSON escape quotes
                gsub(/\r/,"", val)
                printf "%s\"%s\":\"%s\"", (i>1?",":""), key, val
              }
              print "}"
            }
            END { print "]" }
          ' "$CSV" > "$JSON"

          echo "JSON preview:"
          head -c 400 "$JSON" || true
          echo
          echo "Wrote $(wc -c < "$JSON") bytes to $JSON"

      - name: Inject JSON into template (awk/sed)
        shell: bash
        run: |
          set -euo pipefail
          TEMPLATE="docs/index.tmpl.html"
          OUT="docs/index.html"
          JSON="data/oris_data.json"

          # Prefer block markers; fallback to token replacement.
          if grep -q '<!--DATA:START-->' "$TEMPLATE"; then
            echo "Using marker block replacement."
            TMP_SNIP="$(mktemp)"
            {
              echo '<script>'
              echo -n '  window.ORIS_DATA = '
              cat "$JSON"
              echo ';'
              echo '</script>'
            } > "$TMP_SNIP"

            awk -v snip="$TMP_SNIP" '
              BEGIN{
                while((getline l<snip)>0){ repl = repl l "\n" }
              }
              {
                if (state==0) {
                  if ($0 ~ /<!--DATA:START-->/) {
                    print "<!--DATA:START-->"
                    printf "%s", repl
                    state=1
                  } else {
                    print
                  }
                } else {
                  if ($0 ~ /<!--DATA:END-->/) {
                    print "<!--DATA:END-->"
                    state=0
                  }
                }
              }
              END{
                if (state==1){
                  # If we never saw DATA:END, still close it
                  print "<!--DATA:END-->"
                }
              }
            ' "$TEMPLATE" > "$OUT"
            rm -f "$TMP_SNIP"
          else
            echo "Using __ORIS_DATA__ token replacement."
            sed -e "/__ORIS_DATA__/{
              r $JSON
              s/__ORIS_DATA__//g
            }" "$TEMPLATE" > "$OUT"
          fi

          echo "Built $OUT"
          ls -la "$OUT"
          echo "First 40 lines of output:"
          nl -ba "$OUT" | sed -n '1,40p'

      - name: Upload built HTML as artifact (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: built-index-html
          path: docs/index.html

      - name: Commit & push if changed (handles untracked)
        shell: bash
        run: |
          set -euo pipefail
          git add -N docs/index.html  # stage intent to make diff include untracked
          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git add docs/index.html data/oris_data.json
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "Bake data into docs/index.html"
          git push
